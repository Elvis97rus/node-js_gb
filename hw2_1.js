//синхронно выведется первым - 1
console.log('Record 1');

//выполнится после всех текущих микроочередей
setTimeout(() => {
    // выполнится синхронно в процессе второго прохода - 4
    console.log('Record 2');

    // встанет в микро очередь и выполнится, т.к. больше нет задач
    Promise.resolve().then(() => {
        // выполнится при следующем проходе
        setTimeout(() => {
            // выполнится синхронно при третьем обходе цикла - 5
            console.log('Record 3');

            //выполнится в порядке текущей(третьей) микроочереди - 6
            Promise.resolve().then(() => {
                console.log('Record 4');
            });
        });
    });
});

//синхронно выведется вторым - 2
console.log('Record 5');

//выполнится в порядке текущей(первой) микроочереди - 3
Promise.resolve().then(() => Promise.resolve().then(() => console.log('Record 6')));
